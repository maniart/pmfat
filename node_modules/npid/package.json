{
  "name": "npid",
  "description": "Manage a pid file.",
  "version": "0.4.0",
  "author": {
    "name": "Mathieu Turcotte",
    "email": "turcotte.mat@gmail.com"
  },
  "keywords": [
    "util",
    "pid",
    "daemon",
    "process"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MathieuTurcotte/node-pid.git"
  },
  "devDependencies": {
    "nodeunit": "0.8",
    "jshint": "2.4"
  },
  "scripts": {
    "pretest": "jshint index.js lib/ tests/ examples/",
    "test": "nodeunit tests/"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "readme": "# A pid file manager for Node.js\n[![Build Status](https://secure.travis-ci.org/MathieuTurcotte/node-pid.png?branch=master)](http://travis-ci.org/MathieuTurcotte/node-pid)\n[![NPM version](https://badge.fury.io/js/npid.png)](http://badge.fury.io/js/npid)\n\nManage a pid file in Node.js.\n\n## Installation\n\n``` sh\n$ npm install npid\n```\n\n## Unit tests\n\n``` sh\n$ npm test\n```\n\n## Usage\n\nThis module simply creates and manages a pid file for the entire duration of\nthe program execution. The pid file is automatically deleted upon normal program\nexit. If a pid file already exists, an exception will be thrown.\n\n``` js\nvar npid = require('npid');\n\ntry {\n    var pid = npid.create('/var/run/chubaka.pid');\n    pid.removeOnExit();\n} catch (err) {\n    console.log(err);\n    process.exit(1);\n}\n```\n\nNote that the pid file won't be removed when a program stops due to an uncaught\nexception or a unhandled signal. This can be avoided by specifying handlers for\nuncaught exceptions and signals that call `process.exit` or remove the pid file\nexplicitly before exiting.\n\n## API\n\n### Static functions\n\n#### npid.create(path, [force]): npid.Pid\n\n- path: pid file path\n- force: overwrite any existing pid file\n\nSynchronously creates a pid file and returns a handle to it. Will throw an\nexception if a pid file already exists and the `force` parameter is false.\n\n#### npid.remove(path): bool\n\n- path: pid file path\n\nSynchronously removes a pid file. Does not throw if the pid file is missing or\nif the removal fails. Returns a boolean indicating whether the pid file removal\nsucceeded.\n\n### Class Pid\n\nRepresents a handle to a pid file and expose an API to remove it either\nautomatically at process exit or manually when the process exits due to\nan uncaught exception or a signal.\n\n#### pid.remove(): bool\n\nSynchronously removes the pid file. Does not throw if the pid file is missing\nor if the removal fails. Returns a boolean indicating whether the pid file\nremoval succeeded.\n\n#### pid.removeOnExit()\n\nRemoves the pid file on normal process exit.\n\n## License\n\nThis code is free to use under the terms of the [MIT license](http://mturcotte.mit-license.org/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MathieuTurcotte/node-pid/issues"
  },
  "homepage": "https://github.com/MathieuTurcotte/node-pid",
  "_id": "npid@0.4.0",
  "dist": {
    "shasum": "a379204d18d2b80e569937f9f20d437e8b4b08d1"
  },
  "_from": "npid@",
  "_resolved": "https://registry.npmjs.org/npid/-/npid-0.4.0.tgz"
}
